#! /usr/bin/env node
/**
 *  @file       dcp-worker.js
 *              Standalone NodeJS DCP Worker
 *
 *  @author     Ryan Rossiter, ryan@kingsds.network
 *  @date       April 2020
 */
'use strict';

const process = require('process');
const os = require('os');

const DEFAULT_CORES = os.cpus().length - 1;

try {
  var niim = require('niim'); /* debugger? */
} catch(e) {};

async function main () {
  await require('dcp-client').init(process.argv);

  const argv = require('dcp/dcp-cli')
  .base('Standalone NodeJS DCP Worker')
  .command('start',
    'Start the worker.', {
      cores: {
        alias: 'c',
        describe: 'Number of cores to work with',
        type: 'number',
        default: DEFAULT_CORES,
      },
      verbose: {
        alias: 'v',
        describe: 'Enable verbose output',
        type: 'boolean',
        default: false,
      },
      outputMode: {
        alias: 'o',
        describe: 'Set the output mode',
        type: 'string',
        default: niim ? 'console' : 'detect',
        choices: ['detect', 'console', 'dashboard'],
      }
    })
  .demandCommand(1)
  .strict().argv;

  const command = argv._[0];
  switch (command) {
    case 'start':
      await startWorking(argv);
      break;
    default:
      console.error(`Unknown command ${command}.`);
  }
}

// Preserve console.error, the dashboard replaces it with a custom logger
const logError = console.error;
main()
.then(() => process.exit(0))
.catch(e => {
  logError("Script failed:");
  logError(e);
  process.exit(1);
});

/**
 * 
 * @param {object} options
 * @param {number} options.cores - Number of cores to work with
 * @param {boolean} options.verbose - Verbose output
 * @param {string} options.outputMode - Passed to startSupervisorLogger to determine which outputMode to use
 */
async function startWorking(options) {
  const compute = require('dcp/compute');
  const dcpConfig = require('dcp/dcp-config');
  const wallet = require('dcp/wallet');

  const { Worker } = require('./lib/standaloneWorker');
  const { startSupervisorLogger } = require('./lib/startSupervisorLogger');

  const { getIdentityKeystore, getAccountKeystore } = require('dcp/dcp-cli');

  const identityKeystore = await getIdentityKeystore();
  wallet.addId(identityKeystore);
  const accountKeystore = await getAccountKeystore();
  wallet.add(accountKeystore);

  compute.supervisor.maxWorkingWorkers = options.cores;
  compute.supervisor.options.distributedWorkerOptions = {
    WorkerConstructor: Worker,
  };

  startSupervisorLogger(compute.supervisor, {
    verbose: options.verbose,
    outputMode: options.outputMode,
  });

  console.log(` * Starting DCP Worker`);
  console.log(` . Configured for scheduler ${dcpConfig.scheduler.location.href}`);
  console.log(` . Earned funds will be deposited in account ${accountKeystore.address} in bank ${dcpConfig.bank.location.href}`);
  console.log(` . Identity is ${identityKeystore.address}`);

  compute.mine();

  await new Promise(resolve => process.on('SIGQUIT', resolve));

  console.log('\n*** caught SIGQUIT; exiting...\n');
  await compute.supervisor.stopWork(true);
}
