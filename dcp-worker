#! /usr/bin/env node
/**
 *  @file       dcp-worker.js
 *              Standalone NodeJS DCP Worker
 *
 *  @author     Ryan Rossiter, ryan@kingsds.network
 *  @date       April 2020
 */
'use strict';

const process = require('process');
const os = require('os');

const DEFAULT_CORES = os.cpus().length - 1;

async function main () {
  const autoUpdate = process.argv.includes("--autoUpdate");
  await require('dcp-client').init({autoUpdate});

  const argv = require('dcp/dcp-cli')
  .base('Standalone NodeJS DCP Worker')
  .command('start [paymentAddress]',
    'Start the worker.', yargs => yargs
    .positional('paymentAddress', {
      describe: 'The address to deposit funds into, will use the default bank keystore if not provided.'
    })
    .options({
      cores: {
        alias: 'c',
        describe: 'Number of cores to work with',
        type: 'number',
        default: DEFAULT_CORES,
      },
      verbose: {
        alias: 'v',
        describe: 'Enable verbose output',
        type: 'boolean',
        default: false,
      },
      outputMode: {
        alias: 'o',
        describe: 'Set the output mode',
        type: 'string',
        default: 'detect',
        choices: ['detect', 'console', 'dashboard', 'report'],
      },
      daemonHostname: {
        alias: 'dh',
        describe: 'Inet Daemon hostname',
        type: 'string',
        default: 'localhost',
      },
      daemonPort: {
        alias: 'dp',
        describe: 'Inet Daemon port',
        type: 'number',
        default: 9000,
      },
      priorityOnly: {
        alias: 'p',
        describe: 'Set the priority mode',
        type: 'boolean',
        default: false
      },
      reportInterval: {
        describe: 'Set the interval (in ms) with which to write report summaries to the reportFile (only used by the report outputMode)',
        type: 'number',
        default: 60 * 1000, // 1 minute
      },
      reportFile: {
        describe: 'Set the file path to write report summaries to (only used by the report outputMode)',
        type: 'string',
        default: './report.txt',
      }
    })
  )
  .demandCommand(1)
  .strict().argv;

  const command = argv._[0];
  switch (command) {
    case 'start':
      await startWorking(argv);
      break;
    default:
      console.error(`Unknown command ${command}.`);
  }
}

// Preserve console.error, the dashboard replaces it with a custom logger
const logError = console.error;
main()
.then(() => process.exit(0))
.catch(e => {
  logError("Script failed:");
  logError(e);
  process.exit(1);
});

/**
 * 
 * @param {object} options
 * @param {string} options.paymentAddress
 * @param {number} options.cores - Number of cores to work with
 * @param {boolean} options.verbose - Verbose output
 * @param {string} options.outputMode - Passed to startSupervisorLogger to determine which outputMode to use
 * @param {string} options.daemonHostname - Inet daemon hostname
 * @param {number} options.daemonPort - Inet daemon port
 * @param {boolean} options.priorityOnly - Whether this worker should only work on priority jobs
 * @param {number} options.reportInterval
 * @param {string} options.reportFile
 */
async function startWorking(options) {
  const dcpConfig = require('dcp/dcp-config');
  const wallet = require('dcp/wallet');
  const Worker = require('dcp/worker');

  const { Worker: StandaloneWorker } = require('./lib/standaloneWorker');
  const { startWorkerLogger } = require('./lib/startWorkerLogger');

  const identityKeystore = await wallet.getId();
  // unlock the id keystore before starting the worker
  await identityKeystore.unlock(null, 5 * 60 /* 5 minutes */, true);

  let paymentAddress;
  if (options.paymentAddress) {
    paymentAddress = new wallet.Address(options.paymentAddress);
  } else {
    paymentAddress = (await wallet.get()).address;
  }

  const worker = new Worker({
    maxWorkingSandboxes: options.cores,
    paymentAddress,
    priorityOnly: options.priorityOnly,
    watchdogInterval: process.env.TEST_HARNESS && 1000, // speed up the fetch interval when running from tests
    sandboxOptions: {
      SandboxConstructor: function (opts) {
        return new StandaloneWorker({ ...opts,
          hostname: options.daemonHostname,
          port: options.daemonPort,
        });
      },
    }
  });

  startWorkerLogger(worker, {
    verbose: options.verbose,
    outputMode: options.outputMode,
    reportInterval: options.reportInterval,
    reportFile: options.reportFile,
  });

  if (process.env.TEST_HARNESS) {
    const { bindToTestHarness } = require('./lib/bindToTestHarness');
    bindToTestHarness(worker);
  }

  console.log(` * Starting DCP Worker`);
  console.log(` . Configured for scheduler ${dcpConfig.scheduler.location.href}`);
  console.log(` . Earned funds will be deposited in account ${paymentAddress} in bank ${dcpConfig.bank.location.href}`);
  console.log(` . Identity is ${identityKeystore.address}`);

  worker.start();

  await new Promise(resolve => process.on('SIGQUIT', resolve));

  console.log('\n*** caught SIGQUIT; exiting...\n');
  await worker.stop(true);
}
