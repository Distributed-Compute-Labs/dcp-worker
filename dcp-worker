#! /usr/bin/env node
/**
 *  @file       dcp-worker.js
 *              Standalone NodeJS DCP Worker
 *
 *  @author     Ryan Rossiter, ryan@kingsds.network
 *  @date       April 2020
 */
'use strict';

const process = require('process');
const os = require('os');
const fs = require('fs');

const DEFAULT_CORES = os.cpus().length - 1;
var worker, dcpConfig;

async function main () {
  process.on('unhandledRejection', unhandledRejectionHandler);

  await require('dcp-client').init(process.argv);

  const argv = require('dcp/dcp-cli')
  .base('Standalone NodeJS DCP Worker')
  .command('start [paymentAddress]',
    'Start the worker.', yargs => yargs
    .positional('paymentAddress', {
      describe: 'The address to deposit funds into, will use the default bank keystore if not provided.'
    })
    .options({
      cores: {
        alias: 'c',
        describe: 'Number of cores to work with',
        type: 'number',
        default: DEFAULT_CORES,
      },
      verbose: {
        alias: 'v',
        describe: 'Enable verbose output',
        type: 'boolean',
        default: false,
      },
      outputMode: {
        alias: 'o',
        describe: 'Set the output mode',
        type: 'string',
        default: 'detect',
        choices: ['detect', 'console', 'dashboard'],
      },
      daemonHostname: {
        alias: 'dh',
        describe: 'Inet Daemon hostname',
        type: 'string',
        default: 'localhost',
      },
      daemonPort: {
        alias: 'dp',
        describe: 'Inet Daemon port',
        type: 'number',
        default: 9000,
      },
      priorityOnly: {
        alias: 'p',
        describe: 'Set the priority mode',
        type: 'boolean',
        default: false
      }
    })
  )
  .demandCommand(1)
  .strict().argv;

  const command = argv._[0];
  switch (command) {
    case 'start':
      await startWorking(argv);
      break;
    default:
      console.error(`Unknown command ${command}.`);
  }
}

// Preserve console.error, the dashboard replaces it with a custom logger
const logError = console.error;
main()
.then(() => process.exit(0))
.catch(e => {
  logError("Script failed:");
  logError(e);
  process.exit(1);
});

/**
 * 
 * @param {object} options
 * @param {string} options.paymentAddress
 * @param {number} options.cores - Number of cores to work with
 * @param {boolean} options.verbose - Verbose output
 * @param {string} options.outputMode - Passed to startSupervisorLogger to determine which outputMode to use
 * @param {string} options.daemonHostname - Inet daemon hostname
 * @param {number} options.daemonPort - Inet daemon port
 * @param {boolean} options.priorityOnly - Whether this worker should only work on priority jobs
 */
async function startWorking(options) {
  dcpConfig = require('dcp/dcp-config');
  const wallet = require('dcp/wallet');
  const Worker = require('dcp/worker');

  const { Worker: StandaloneWorker } = require('./libexec/standaloneWorker');
  const { startWorkerLogger } = require('./libexec/startWorkerLogger');

  const identityKeystore = await wallet.getId();
  // unlock the id keystore before starting the worker
  await identityKeystore.unlock(null, 5 * 60 /* 5 minutes */, true);

  let paymentAddress;
  if (options.paymentAddress) {
    paymentAddress = new wallet.Address(options.paymentAddress);
  } else {
    paymentAddress = (await wallet.get()).address;
  }

  if (typeof dcpConfig.worker.unhandledRejectionCleanupTimeout !== 'undefined')
    unhandledRejectionHandler.timeout = dcpConfig.worker.unhandledRejectionCleanupTimeout;
  
  worker = new Worker({
    maxWorkingSandboxes: options.cores,
    paymentAddress,
    priorityOnly: options.priorityOnly,
    watchdogInterval: process.env.TEST_HARNESS && 1000, // speed up the fetch interval when running from tests
    sandboxOptions: {
      SandboxConstructor: function (opts) {
        return new StandaloneWorker({ ...opts,
          hostname: options.daemonHostname,
          port: options.daemonPort,
        });
      },
    }
  });

  worker.on('start', () => {
    console.log(' . ready');
    startWorkerLogger(worker, {
      verbose: options.verbose,
      outputMode: options.outputMode,
    });
  });
  
  if (process.env.TEST_HARNESS) {
    const { bindToTestHarness } = require('./libexec/bindToTestHarness');
    bindToTestHarness(worker);
  }

  console.log(` * Starting DCP Worker`);
  console.log(` . Configured for scheduler ${dcpConfig.scheduler.location.href}`);
  console.log(` . Earned funds will be deposited in account ${paymentAddress} in bank ${dcpConfig.bank.location.href}`);
  console.log(` . Identity is ${identityKeystore.address}`);

  worker.start();

  await new Promise(resolve => process.on('SIGQUIT', resolve));

  console.log('\n*** caught SIGQUIT; exiting...\n');
  await worker.stop(true);
}

/** 
 * Unhandled rejection handler: __must not ever throw no matter what__.
 * If we hit an unhandled rejection, we are by definition no longer confident of our program state, meaning that
 * the worker must be restarted. This handler does its best to report the rejection and give the worker a few
 * seconds in which to attempt to return slices to the scheduler before it gives up completely.
 */
async function unhandledRejectionHandler (error) {
  let _worker = worker;
  
  if (!worker)
    return;
  else
    worker = false;

  try {
    let log = dcpConfig && dcpConfig.worker && dcpConfig.worker.unhandledRejectionLog;
    log = process.env.DCP_WORKER_UNHANDLED_REJECTION_LOG;
    if (log) {
      fs.appendFileSync(process.env.DCP_WORKER_UNHANDLED_REJECTION_LOG,
                        `${Date.now()}: ${error.message}\n${error.stack}\n\n`);
    }
  } catch(e) {};
  
  try { console.error('Unhandled rejection:', error.message) } catch(e) {};
  try { require('./libexec/worker-loggers/dashboard').screen.destroy(); } catch(e) {};

  function bailSoon(exitCode) {
    try { require('./libexec/worker-loggers/dashboard').screen.destroy(); } catch(e) { console.log(e) };
    try { unhandledRejection.console.log('Worker stop timeout; bailing to due earlier unhandled rejection', error); } catch(e) {};
    setImmediate(() => process.exit(exitCode || 31));
  }
  setTimeout(bailSoon, 1000 * unhandledRejectionHandler.timeout);

  try {
    await _worker.stop(true);
    bailSoon(33);
  } catch(e) {
    console.log('Error during worker.stop:', e);
    bailSoon(34);
  }

  try { unhandledRejection.console.error('Unhandled rejection:', error) } catch(e) {};
//  setImmediate(process.exit(32));
};
unhandledRejectionHandler.timeout = 5;
unhandledRejectionHandler.console = console;
