#! /usr/bin/env node
/** @file       dcp-evaluator-start
 *  @author     Eddie Roosenmaallen, eddie@kingsds.network
 *              Levi Stringer, levi@kingsds.network
 *  @date       September 2020
 *  
 *  This script starts the DCP Native Evaluator in server mode, with the 
 *  appropriate list of worker startup files queued up
 */

require('dcp-client').initSync(require(process.env.DCP_CONFIG || '../etc/dcp-config'));

const path = require('path');
const dcpConfig = require('dcp/dcp-config');

const options = require('dcp/dcp-cli')
  .base('Evaluator frontend')
  .option('prefix', {
    desc: 'Path under which native components are installed',
    default: path.resolve(__dirname, '..'),
  })
  .option('port', {
    alias: ['p'],
    desc: 'Port to listen on',
    default: Number(dcpConfig.evaluator.listen.port),
  })
  .option('evaluator', {
    alias: ['e'],
    desc: 'Path to evaluator (normally prefix/bin/dcp-evaluator)',
  })
  .option('evaluator-libexec-dir', {
    alias: ['l'],
    desc: 'Location of evaluator libraries (prefix/libexec unless -e)',
  })
  .option('sandbox-libexec-dir', {
    desc: 'Location of sandbox setup files',
    default: '../libexec/sandbox',
  })
  .option('sandbox-definitions', {
    desc: 'Index of sandbox setup files for different evaluator/sandbox types', 
    default: '../generated/sandbox-definitions.json',
  })
  .option('sandbox-type', {
    alias: ['t'],
    desc: 'Type of evaluator/sandbox', 
    default: 'native'  
  })
  .option('dump', {
    alias: ['D'],
    desc: 'Dump configuration to stdout and exit',
  })
  .option('-', { desc: 'end of options - all subsequent options passed directly to evaluator' })
  .wrap(process.stdout.columns || 80)
  .argv;

if (!options.evaluator) {
  options.evaluator = path.resolve(options.prefix , 'bin', 'dcp-evaluator');
  if (!options.evaluatorLibexecDir)
    options.evaluatorLibexecDir = path.resolve(options.prefix, 'libexec', 'evaluator');
}

// Requires the list of files module (sandbox-definitions.json) and then chooses what export evaluator (options.sandboxType)
const setupFiles = require(options.sandboxDefinitions)[options.sandboxType]
debugger

const bin = options.evaluator && path.resolve(options.evaluator) || path.join(options.prefix, 'bin', 'dcp-evaluator');
let args = [
  '--port', options.port,
];

if (options.evaluatorLibexecDir)
  args = args.concat(['-l', path.join(options.prefix, 'libexec', 'evaluator')]);
if (options._)
  args = args.concat(options._);

// web config doesn't nicely handle arrays, so setupFiles.forEach is no-go;
// this hack works with either a real array, or an arrayish-looking ES object
// such as we get in the bundled config.
for (let n=0; setupFiles[n]; n++) {
  // If the path is a realative path nodemodule (i.e. bravajs), take it directly from node_modules
  if (/(^[.])|(\/)/.test(setupFiles[n])){ 
    args.push(require.resolve(setupFiles[n]))
  } else {
    args.push(require.resolve(path.join(options.sandboxLibexecDir, setupFiles[n])));
  }
}

// Spits out the list of files for a node evaluator instead of spinning up an v8-evaluator 
if (options.sandboxType === 'node') {
  console.error("*** WARNING: Node evaluator is not suitable for production work ***");
  if (process.env['I_WANT_AN_INSECURE_DCP_WORKER'] !== 'badly') {
    for (let i=10; i; i--) {
      process.stdout.write(Buffer.from('...' + i + ' \x08\x08', 'utf-8'));
      require('dcp/utils').sleep(1 - 0.1);
      process.stdout.clearLine();
      process.stdout.cursorTo(0);
    }
    process.stdout.write(Buffer.from('            \n', 'utf-8'));
  }
}

// Log what we're about to do:
console.log('DCP Evaluator Server');
console.log('Evaluator binary at: ', bin);
console.log('Library path at:     ', options.evaluatorLibexecDir);
console.log('Listening on port:   ', options.port);
console.log('Worker environment:  ');
args.slice(4).forEach(f => {
  console.log('\t' + f);
});

if (options.dump) {
  console.log('Evaluator command:', args.join(' '));
  console.log('Options:', options);
  process.exit(0);
}

const ran = require('child_process').spawnSync(bin, args, {
  cwd: __dirname,
  windowsHide: true,
  stdio: ['inherit', 'inherit', 'inherit']
});

console.log('');
if (ran.signal)
  console.log(`Evaluator server caught signal ${ran.signal}`);
if (ran.error) {
  delete ran.error.stack;
  console.error(ran.error);
}

if (!ran.signal && !ran.error) {
  console.log('Evaluator server process exited, status', ran.status);
  process.exit(ran.status);
}

process.exit(1);
