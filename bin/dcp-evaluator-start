#!/usr/bin/env node
/** @file       dcp-evaluator-start
 *  @author     Eddie Roosenmaallen, eddie@kingsds.network
 *              Levi Stringer, levi@kingsds.network
 *  @date       September 2020
 *
 *  This script starts a DCP Evaluator, with the
 *  appropriate list of worker startup files queued up
 */
'use strict';

function main() {
  const { clearLine, cursorTo } = require('readline');
  const path = require('path');
  const fs = require('fs');
  const os = require('os');
  const dcpConfig = require('dcp/dcp-config');
  const dcpClientDir = path.dirname(require.resolve('dcp-client'));
  var evaluator;

  /* All evaluators must understand the following command-line options:
   * -l - location of libs
   * -p - port to listen on; unspecified => stdio
   */
  const options = require('dcp/cli')
        .base('Evaluator frontend')
        .option('prefix', {
          desc: 'Path under which native components are installed',
          default: path.resolve(path.dirname(process.argv[1]), '..'),
        })
        .option('port', {
          alias: ['p'],
          desc: 'Port to listen on',
          deprecated: true,
          default: Number(dcpConfig.evaluator.listen.port),
        })
        .option('stdio', {
          alias: ['s'],
          desc: 'Use stdio pipeline (eg for inetd) instead of tcp port',
          type: 'boolean',
          default: false,
        })
        .option('evaluator', {
          alias: ['e'],
          desc: 'Path to evaluator (default: prefix/bin/dcp-evaluator)',
        })
        .option('rEvaluator', {
          alias: ['r'],
          desc: 'Path to evaluator as a module identitifer',
        })
        .option('evaluator-lib-dir', {
          alias: ['l'],
          deprecated: true,
          desc: 'Location of evaluator libraries',
          default: dcpConfig.evaluator.libDir || undefined
        })
        .option('sandbox-libexec-dir', {
          desc: 'Location of sandbox setup files',
          default: path.resolve(dcpClientDir, 'libexec', 'sandbox'),
        })
        .option('sandbox-definitions', {
          desc: 'Index of sandbox setup files for different evaluator/sandbox types',
          default: path.resolve(dcpClientDir, 'generated', 'sandbox-definitions.json'),
        })
        .option('sandbox-type', {
          alias: ['t'],
          desc: 'Type of evaluator/sandbox',
          default: 'native'
        })
        .option('dump', {
          alias: ['D'],
          desc: 'Dump configuration to stdout and exit',
        })
        .option('dump-types', {
          alias: ['T'],
          desc: 'Dump list of known sandbox types to stdout and exit',
        })
        .option('dump-files', {
          alias: ['F'],
          desc: 'Dump list of startup files which would be passed to the evaluator and exit',
        })
        .option('json', {
          alias: ['J'],
          desc: 'Dump in JSON format',
        })
        .option('verbose', {
          alias: ['v'],
          desc: 'Generate verbose output',
        })
        .option('pidFileLoc', {
          alias: ['F'],
          desc: 'Location for dcp-evaluator PID file',
        })
        .options('debugLogLevel', {
          alias: ['d'],
          deprecated: true,
          desc: 'Log level for evaluator output (max 8)',
        })
        .epilogue("To pass arguments to the evaluator, make sure to separate your arguments with a '--'. For example: 'dcp-evaluator-start -p 9000 -- --options=--max-old-space-size=2048'")
        .wrap(process.stdout.columns || 80)
        .strict()
        .argv;

  if (!options.evaluator)
    options.evaluator = path.join(options.prefix, 'bin', 'dcp-evaluator');

  if (options.stdio)
    delete options.port;

  const sandboxSetupDefs = require(options.sandboxDefinitions)[options.sandboxType]
  if (!sandboxSetupDefs)
    throw new Error(`Invalid sandbox type: ${options.sandboxType}`);

  if (options.rEvaluator)
    evaluator = require.resolve(options.rEvaluator);
  else
    evaluator = path.resolve(options.evaluator);

  let args = [];    /* Command-line arguments to pass to evaluator */
  let files = [];   /* Startup files passed to evaluator as supplementary arguments */

  if (!options.stdio && options.port) {
    console.warn(`Note: --port (-p) is deprecated. Please pass this argument to the evalutor 'dcp-evaluator-start ... -- -p ${options.port}'`);
    args = args.concat(['-p', options.port]);
  }
  if (options.evaluatorLibDir) {
    console.warn(`Note: --evaluator-lib-dir (-l) is deprecated. Please pass this argument to the evalutor 'dcp-evaluator-start ... -- -l ${options.evaluatorLibDir}'`);
    options.evaluatorLibDir = path.resolve(options.prefix, 'etc', options.evaluatorLibDir);
    args = args.concat(['-l', options.evaluatorLibDir]);
  }
  if (options.debugLogLevel){
    console.warn(`Note: --debugLogLevel (-d) is deprecated. Please pass this argument to the evalutor 'dcp-evaluator-start ... -- --debug ${options.debugLogLevel}'`);
    args = args.concat(['-d'], options.debugLogLevel)
  }
  if (options._)
    args = args.concat(options._);

  /* Definitions in the JSON file are either in the sandboxLibexecDir, or pathed
   * via normal CommonJS (node_modules) rules.  The syntax for detecting which must
   * stay synchronized with dcp/src/dcp-client/worker/evaluators/browser.js.
   */
  for (let def of sandboxSetupDefs) {
    if (def.match(/\//))
      files.push(require.resolve(def));
    else
      files.push(require.resolve(options.sandboxLibexecDir + '/' + def));
  }

  if (options.dump) {
    if (options.json) {
      console.log(JSON.stringify({evaluator, args, files, options}));
    } else {
      console.log('Evaluator command:', [evaluator].concat(args).concat(files).join(' '));
      console.log('Options:', options);
    }
    process.exit(0);
  }

  if (options.dumpFiles) {
    let dump = files;

    if (options.json)
      dump = JSON.stringify(dump);
    console.log(dump);
    process.exit(0);
  }

  if (options.dumpTypes) {
    let dump = Object.keys(require(options.sandboxDefinitions));

    if (options.json)
      dump = JSON.stringify(dump);
    console.log(dump);
    process.exit(0);
  }

  if (!options.stdio && options.sandboxType === 'node') {
    if (process.env.I_WANT_AN_INSECURE_DCP_WORKER !== 'badly') {
      console.warn('***\x07 WARNING: Node evaluator is not suitable for production work - ^C to abort');
      for (let i = 5; i; i -= 1) {
        process.stdout.write(Buffer.from(`...${i} \x08\x08\x07`, 'utf-8'));
        require('dcp/utils').sleep(1 - 0.1);
        clearLine(process.stdout);
        cursorTo(process.stdout, 0);
      }

      process.stdout.write(Buffer.from('            \n', 'utf-8'));
    }
  }

  if (!options.stdio) {
    // Log what we're about to do:
    console.log('Starting DCP Evaluator -- ');
    console.log('. Evaluator program at:\t\t', evaluator);
    console.log('. Library path at:     \t\t', options.evaluatorLibDir);
    if (options.stdio)
      console.log('. Running in single-shot over stdio pipeline');
    else
      console.log('. Listening on:      \t\t', options.port);
    console.log('. Worker environment type:\t', options.sandboxType);
    console.log('. Worker environment:  \t');
    files.forEach(f => {
      console.log('\t' + f);
    });
    console.log('');
  }

  if (options.pidFileLoc)
    memoizePid(options.pidFileLoc)

  if (options.verbose) {
    console.log('. cwd:', path.join(options.prefix));
    console.log('. run:', [evaluator].concat(args).concat(files).map(a => `"${a}"`).join(' '));
  }
  const ran = require('child_process').spawnSync(evaluator, args.concat(files), {
    cwd: path.join(options.prefix),
    windowsHide: true,
    stdio: ['inherit', 'inherit', 'inherit']
  });

  if (ran.signal && !options.stdio)
    console.log(`Evaluator server caught signal ${ran.signal}`);
  if (ran.error) {
    delete ran.error.stack;
    console.error(ran.error);
  }

  if (!ran.signal && !ran.error) {
    if (!options.stdio)
      console.log('Evaluator server process exited, status', ran.status);
    process.exit(ran.status);
  }

  process.exit(1);
}

/* Half-initialize the dcp-client library so that we can use dcp/cli, but 
 * without checking the scheduler for configuration updates.
 */
require('dcp-client');
const dcpConfig = require('dcp/dcp-config');
const localConfig = require(process.env.DCP_CONFIG || '../etc/dcp-config');
if (!localConfig.bundle)
  localConfig.bundle = {};
if (!localConfig.scheduler)
  localConfig.scheduler = {};
localConfig.bundle.location = false;
localConfig.scheduler.configLocation = false;
Object.assign(dcpConfig, require('dcp/utils').leafMerge(dcpConfig, localConfig));

// Create the PID file for the worker
function memoizePid(dir)
{
  const path = require('path');
  const fs = require('fs');
  const program = path.basename(require.main.filename, '.js');
  let location;
  let filename;
  let fileType = '.pid';

  // Set default location for pid file
  let DEFAULT_PID_LOC;
  if (fs.existsSync('/var/dcp/run'))
    DEFAULT_PID_LOC = '/var/dcp/run/';
  else if (fs.existsSync('/var/run'))
    DEFAULT_PID_LOC = '/var/run/';
  else
    DEFAULT_PID_LOC = require('os').tmpdir();

  if (dir.length && dir.length > 0)
  {
    if (fs.existsSync(dir))
    {
      if (fs.statSync(dir).isDirectory())
      {
        location = dir;
        filename = program;
      }
      else
      {
        console.warn('Previous PID file was not cleaned up');
        location = path.dirname(dir);
        filename = path.basename(dir);
        fileType = '';
      }
    }
    else if (dir.endsWith(path.sep))
    {
      location = dir;
      filename = program;
    }
    else
    {
      location = path.dirname(dir)
      filename = path.basename(dir);
      fileType = '';
    }
  }
  else
  {
    location = DEFAULT_PID_LOC;
    filename = program;
  }
  
  const pidfile = path.join(
    location,
    filename + fileType
  )
  try
  {
    if (fs.existsSync(pidfile))
    {
      const oldPid = fs.readFileSync(pidfile, 'utf8')
      console.warn(`Warning: Previous invocation${oldPid.length ? ' pid#' + parseInt(String(oldPid)) : ''} did not remove ${pidfile}`);
    }
    else
      memoizePid.fd = fs.openSync(pidfile, 'wx');

    fs.writeSync(memoizePid.fd, Buffer.from(process.pid + '\n'), 0);
  }
  catch (error)
  {
    console.warn(`Warning: Could not create pidfile at ${pidfile} (${error.code || error.message})`);
    
    if (typeof memoizePid.fd === 'number')
    {
      fs.closeSync(memoizePid.fd);
      delete memoizePid.fd;
    }
    return;
  }

  function exitHandler()
  {
    try
    {
      fs.unlinkSync(pidfile);
      fs.closeSync(memoizePid.fd);
      delete memoizePid.fd;
    }
    catch (error)
    {
      console.warn(`Warning: Could not remove pidfile at ${pidfile} (${error.code})`);
    }
  }
  
  // Cleanup PID file
  require('dcp/signal-handler').init();
  process.on('dcpExit', exitHandler);
}
main();

