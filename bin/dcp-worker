#!/usr/bin/env node
/**
 *  @file       dcp-worker.js
 *              Standalone NodeJS DCP Worker
 *
 *  @author     Ryan Rossiter, ryan@kingsds.network
 *  @date       April 2020
 */
'use strict';

const process = require('process');
const os = require('os');
const fs = require('fs');

// Set to true to try to understand unhandled rejection.
const ANALYZE_UNHANDELD_REJECTION = false;

const TOTAL_CPU_VCORES = os.cpus().length;
const DEFAULT_CORES = TOTAL_CPU_VCORES - 1;
var worker, dcpConfig;


process.on('unhandledRejection', (error) => {
  console.error('Unhandled rejection:', error);
});

async function main () {
  if (!ANALYZE_UNHANDELD_REJECTION)
    process.on('unhandledRejection', unhandledRejectionHandler);

  await require('dcp-client').init(require(process.env.DCP_CONFIG || '../etc/dcp-config'));
  dcpConfig = require('dcp/dcp-config');
  require('../lib/check-scheduler-version').check();

  const cliArgs = require('dcp/cli')
  .base('Standalone NodeJS DCP Worker')
    .options({
      paymentAddress: {
        describe: 'The address to deposit funds into, will use the default bank keystore if not provided.',
        type: 'string',
      },
      cores: {
        alias: 'c',
        describe: 'Number of cores to work with',
        type: 'number',
        default: DEFAULT_CORES,
      },
      verbose: {
        alias: 'v',
        describe: 'Enable verbose output',
        type: 'count',
        default: false,
        group: 'Output options',
      },
      outputMode: {
        alias: 'o',
        describe: 'Set the output mode',
        type: 'string',
        default: 'detect',
        choices: ['detect', 'console', 'dashboard', 'event-log', 'syslog', 'logfile'],
        group: 'Output options',
      },
      hostname: {
        alias: 'H',
        describe: 'Evaluator hostname',
        type: 'string',
        default: dcpConfig.evaluator.location.hostname,
      },
      port: {
        alias: 'p',
        describe: 'Evaluator port',
        type: 'number',
        default: Number(dcpConfig.evaluator.location.port),
      },
      priorityOnly: {
        alias: 'P',
        describe: 'Set the priority mode [deprecated]',
        type: 'boolean',
        default: false
      },
      'job-id': {
        alias: 'j',
        describe: 'Restrict worker to a specific job (use N times for N jobs)',
        type: 'array',
      },

      join: {
        alias: 'g',
        describe: 'Join compute group; the format is "joinKey,joinSecret" or "joinKey,eh1-joinHash"',
        type: 'array'
      },
      joinKeystore: {
        hidden: true,
        /* future */
      },

      leavePublicGroup: {
        type: 'boolean',
        describe: 'Do not fetch slices from public compute group',
        default: false
      },
      publicGroupFallback: {
        describe: 'If set, worker will prefer private groups but fall back on the public group if no preferred work is available',
        type: 'boolean',
        default: false,
      },

      identityKey: {
        describe: 'Identity key, in hex format',
        type: 'string',
        group: 'Identity options',
      },
      identityKeystore: {
        describe: 'Identity keystore, in json format',
        type: 'string',
        group: 'Identity options',
      },

      reportInterval: {
        describe: 'If set, output a status summary every [interval] seconds in console output mode',
        type: 'number',
        group: 'Output options',
      },
      eventDebug: {
        hide: true,
        describe: 'If set, dump all sandbox and worker events',
      },

      logfile: {
        describe: 'Path to log file (if --output=file)',
        type: 'string',
        group: 'Log File output options',
      },
      syslogAddress: {
        describe: 'Address of rsyslog server (if --output=syslog)',
        type: 'string',
        group: 'Syslog output options',
      },
      syslogTransport: {
        describe: 'Transport to connect to rsyslog daemon (if --output=syslog)',
        type: 'string',
        choices: ['udp','tcp'],
        group: 'Syslog output options',
      },
      syslogPort: {
        describe: 'UDP/TCP port of rsyslog server',
        type: 'number',
        group: 'Syslog output options',
      },

      allowedOrigins: {
        alias: 'a',
        describe: 'modify the \'any\' allow origins of dcpConfig',
        type: 'array'
      },

      replPort: {
        describe: 'If set, open a REPL on specified TCP port',
        type: 'number',
        default: undefined,
      },
      watchdogInterval: {
        alias: 'W',
        describe: 'Number of milliseconds between watchdog cycles',
        type: 'number',
        hidden: 'true',
      },
    })
  .strict()
  .wrap(process.stdout.columns || 80)
  .argv;

  return startWorking(cliArgs);
}

// Preserve console.error, the dashboard replaces it with a custom logger
const logError = console.error;
main()
.then(exitcode => process.exit(exitcode || 0))
.catch(e => {
  logError("Script failed:");
  logError(e);
  process.exit(1);
});

// Imperfect, but handles CG { joinKey, joinHash }.
function isHash(b) {
  return b && b.length === 68 && b.startsWith('eh1-');
}

async function startWorking(cliArgs) {
  //console.log('cliArgs', cliArgs);
  const wallet = require('dcp/wallet');
  const DCPWorker = require('dcp/worker').Worker;
  const { startWorkerLogger } = require('../lib/startWorkerLogger');
  const sawOptions = {
    hostname: cliArgs.hostname,
    port:     cliArgs.port
  };

  let paymentAddress;
  if (cliArgs.paymentAddress)
    paymentAddress = new wallet.Address(cliArgs.paymentAddress);
  else
    paymentAddress = (await wallet.get()).address;


  // Different ways to get the identity: 
  let identityKeystore = false;

  if (cliArgs.identityKey)
    identityKeystore = await new wallet.IdKeystore(cliArgs.identityKey, '');
  else if (cliArgs.identityKeystore)
    identityKeystore = await new wallet.IdKeystore(JSON.parse(cliArgs.identityKeystore), '');
  else
    identityKeystore = await wallet.getId();

  // Set the provided identity as the wallet's default
  await wallet.addId(identityKeystore);


  if (typeof dcpConfig.worker.unhandledRejectionCleanupTimeout !== 'undefined')
    unhandledRejectionHandler.timeout = dcpConfig.worker.unhandledRejectionCleanupTimeout;

  // Leave the public compute group, if desired
  if (cliArgs.leavePublicGroup || cliArgs.publicGroupFallback)
    dcpConfig.worker.leavePublicGroup = true;


  // The exitGuard will hold an "exit" method, and a Promise to await for
  // the exit code passed to exitGuard.exit()
  const EXIT_SIGQUIT = 2;
  const EXIT_EVALUATOR_GONE = 3;
  let exitcode = 0;
  const exitGuard = {
    promise: Promise.resolve(0),                     // will be overwritten when worker starts
    exit(code) { process.exit(code||exitcode||0) },  // will be overwritten when worker starts
  };
  process.on('SIGQUIT', () => {
    exitcode = EXIT_SIGQUIT;
    console.info(`240: Caught SIGQUIT; exiting worker with exitcode ${exitcode}`);
    exitGuard.exit(exitcode);
  });


  // Set up "evaluator has gone away" detection
  let workerHasStarted = false;
  sawOptions.onsocketerror = function saw$onsocketerror(error, worker) {
    // If we've ever been connected to the evalserver, then this probably
    // means the screensaver has gone away, so we should stop the worker,
    // return any outstanding work, and exit the frontend so the service
    // manager can restart the worker
    if (workerHasStarted) {
      exitcode = EXIT_EVALUATOR_GONE;
      console.info('167: evaluator server has gone away; terminating worker with exitcode' + exitcode);
      exitGuard.exit(exitcode);
    }
  };


  /** @type {string[]} */
  const dcpWorkerOptions = {
    paymentAddress,
    identity: identityKeystore,
    maxWorkingSandboxes: cliArgs.cores,
    cores:               { cpu: TOTAL_CPU_VCORES, gpu: undefined }, /** XXXpfr @todo: Figure out how many gpus. */
    targetLoad:          { cpu: 1.0, gpu: 1.0 }, /** Use 100%: XXXpfr @todo Allow command-line override. */
    sandboxOptions: {
      SandboxConstructor: require('dcp-client/lib/standaloneWorker').workerFactory(sawOptions)
    },
    computeGroups: [], /* public group is implied */
    leavePublicGroup: cliArgs.leavePublicGroup || dcpConfig.worker.leavePublicGroup,
  };

  /* cliArgs.join is the list of compute groups to join */
  if (cliArgs.join && cliArgs.join.length)
  {
    dcpWorkerOptions.computeGroups = cliArgs.join
      .map((el) => {
        /* Map cliArgs.join to give us [{ joinKey, joinSecret/joinHash }...] */
        const [a, b] = el.split(',');
        return isHash(b) ? { joinKey: a, joinHash: b } : { joinKey: a, joinSecret: b };
      })
      .filter((el) => el.joinKey); /* Filter out entries with no joinKey */
    //console.log(dcpWorkerOptions.computeGroups);
  }
  
  if (cliArgs.jobId)
  {
    dcpWorkerOptions.jobAddresses = cliArgs.jobId;
    dcpWorkerOptions.priorityOnly = true;
  }
  if (cliArgs.allowedOrigins)
    dcpConfig.worker.allowOrigins.any = cliArgs.allowedOrigins;
  if (cliArgs.watchdogInterval)
    dcpWorkerOptions.watchdogInterval = cliArgs.watchdogInterval;


  worker = new DCPWorker(dcpWorkerOptions);

  /**
   * NOTE: In Supervisor2 this function is a NOOP.
   * When (and if) we stop using Supevisor1, delete this reference to setDefaultIdentityKeystore
   * and delete the corresponding fucntion from Supervisor2.
   *
   * startWorkerLogger needs to be called before the worker is started so that
   * it can attach event listeners before the events fire, else UI events for
   * things such as progress will never get attached.
   *
   * setDefaultIdentityKeystore needs to be called before the logger because it
   * tries access the identity of the worker before it has started, i.e. where
   * it sets its identity, throwing an assertion error.
   *
   * FIXME(bryan-hoang): This is a fragile solution that is too coupled with the
   * implementation of the worker that should be addressed in Supervisor 2
   */
  await worker.supervisor.setDefaultIdentityKeystore();


  if (cliArgs.eventDebug) {
    worker.debug = true;
    worker.supervisor.debug = true;
  }


  // if the worker stops internally (eg. schedmsg stop), then exit without
  // changing the saved exitcode
  worker.on('stop', () => {
    exitGuard.exit();
  });


  startWorkerLogger(worker, {
    exitGuard,
    verbose: cliArgs.verbose,
    outputMode: cliArgs.outputMode,

    logfile: cliArgs.logfile,

    syslogAddress: cliArgs.syslogAddress,
    syslogTransport: cliArgs.syslogTransport,
    syslogPort: cliArgs.syslogPort,
  });


  console.log(` * Starting DCP Worker`);
  console.log(` . Configured for scheduler ${dcpConfig.scheduler.location}`);
  console.log(` . Bank is ${dcpConfig.bank.location}`);
  console.log(` . Earned funds will be deposited in account ${paymentAddress}`);
  console.log(` . Identity is ${identityKeystore.address}`);

  function qty(amount, singular, plural) /* XXX i18n */
  {
    if (Array.isArray(amount))
      amount = amount.length;
    if (!plural)
      plural = singular + 's';
    if (!amount)
      return plural;
    if (amount == 1)
      return singular;
    return plural;
  }

  if (dcpWorkerOptions.jobAddresses)
    console.log(` * Processing only ${qty(dcpWorkerOptions.jobAddresses, 'job')}`, dcpWorkerOptions.jobAddresses.join(', '));
  if (dcpWorkerOptions.computeGroups.length)
    console.log(` * Joining compute ${qty(dcpWorkerOptions.computeGroups, 'group')}`, dcpWorkerOptions.computeGroups.map(el => el.joinKey).join(', '));
  if (dcpWorkerOptions.publicGroupFallback)
    console.log(' * Falling back on public group when preferred groups have no work');
  else if (dcpWorkerOptions.leavePublicGroup)
    console.log(' * Leaving the public compute group');
  if (cliArgs.verbose)
    console.log(` + Verbosity level: ${cliArgs.verbose}`);
  if (cliArgs.eventDebug)
    console.log(' + Event debug on');
  console.log(' . output mode: ' + cliArgs.output);
  console.log(' . ready');


  // Set the exit guard - this method can be called by signal and exception
  // handlers
  exitGuard.promise = new Promise(resolve => {
    exitGuard.exit = resolve;
  });


  // Set the flag to indicate when we've seen the evalserver
  worker.on('fetch', () => {
    workerHasStarted = true;
  });


  await worker.start();

  exitcode = await exitGuard.promise;

  console.log(`418: exit guard called with ${exitcode}; workerHasStarted=${workerHasStarted}`);

  const exitTimeAllowed = 30;   // seconds to allow for worker to stop gracefully
  const forceExitTimeout = setTimeout(() => {
    console.error(`396: Worker failed to exit within ${exitTimeAllowed} seconds; terminating forcibly.`);
    process.exit(exitcode || EXIT_TIMEDOUT)
  }, exitTimeAllowed * 1000);

  await worker.stop(true)
  .catch(error => {
    if (error.message.includes('Already stopped'))
      return;
    console.error('255: Unexpected error stopping worker:',
      error.code
      ? `${error.code}: ${error.message}`
      : error.message);
  });

  clearTimeout(forceExitTimeout);

  return exitcode;
}

/** 
 * Unhandled rejection handler: __must not ever throw no matter what__.
 * If we hit an unhandled rejection, we are by definition no longer confident of our program state, meaning that
 * the worker must be restarted. This handler does its best to report the rejection and give the worker a few
 * seconds in which to attempt to return slices to the scheduler before it gives up completely.
 */
async function unhandledRejectionHandler (error) {
  let _worker = worker;
  
  if (!worker)
    return;
  else
    worker = false;

  try {
    let log = dcpConfig && dcpConfig.worker && dcpConfig.worker.unhandledRejectionLog;
    if (!log) log = process.env.DCP_WORKER_UNHANDLED_REJECTION_LOG;
    if (log) {
      fs.appendFileSync(process.env.DCP_WORKER_UNHANDLED_REJECTION_LOG,
                        `${Date.now()}: ${error.message}\n${error.stack}\n\n`);
    }
  } catch(e) {};

  try {
    let screen = require('../lib/worker-loggers/dashboard').screen;

    if (screen) {
      screen.log(error.message + '\n' + error.stack);
      screen.destroy();
    } else {
      console.error('Unhandled rejection - preparing to exit:', error.message);
    }
  } catch(e) {};
  
  function bail(exitCode) {
    try {
      const util = require('util');
      process.stderr.write('\nWorker stop timeout; bailing due to earlier unhandled rejection:\n');
      process.stderr.write(util.inspect(error) + '\n');
    } catch(e) {
      console.error(error);
    }
    process.exit(exitCode || 3);
  }
  setTimeout(bail, 1000 * unhandledRejectionHandler.timeout);

  try {
    await _worker.stop(true);
  } catch(e) {
    console.log('Error during worker.stop:', e);
  }

  setImmediate(() => bail(33));
};
unhandledRejectionHandler.timeout = 5;
