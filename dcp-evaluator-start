#! /usr/bin/env node
/** @file       dcp-evaluator-start
 *  @author     Eddie Roosenmaallen, eddie@kingsds.network
 *              Levi Stringer, levi@kingsds.network
 *  @date       September 2020
 *  
 *  This script starts the DCP Native Evaluator in server mode, with the 
 *  appropriate list of worker startup files queued up
 */

const path = require('path');

require('dcp-client').initSync();

const options = require('dcp/dcp-cli')
  .base('Evaluator frontend')
  .option('prefix', {
    desc: 'Path under which native components are installed',
    default: path.dirname(process.argv[1]),
  })
  .option('port', {
    alias: ['p', 'evaluatorPort', 'daemonPort'],
    desc: 'Port to listen for worker connections',
    default: '9000',
  })
  .option('evaluator', {
    alias: ['e', 'evaluator'], 
    desc: 'Path to evaluator',
    default: path.join(path.dirname(process.argv[1]), 'bin', 'dcp-evaluator'),
  })
  .option('evaluator-libexec-dir', {
    desc: 'Location of evaluator-specific library files', 
    default: path.join(path.dirname(process.argv[1]), 'libexec','evaluator'),
  })
  .option('setup-libexec-dir', {
    desc: 'Location of set up files', 
    default: path.join(path.dirname(process.argv[1]), 'libexec','evaluator'),
  })
  .option('setup-file-index', {
    desc: 'Central authority for defining setup files for different workers', 
    default: './generated/evaluator-setup-files.json',
  })
  .option('evaluator-type', {
    desc: 'Which type of export of the setup-file-index to use',
    default: 'native'  
  })
  .wrap(process.stdout.columns || 80)
  .argv;


// Requires the list of files module (evaluator-setup-files.json) and then chooses what export evaluator (options.evaluatorType)
const setupFiles = require(options.setupFileIndex)[options.evaluatorType];

const dcpConfig = require('dcp/dcp-config');
const schedulerConfig = dcpConfig.scheduler;
debugger
// Check for old versions of the config
if (!schedulerConfig.worker) {
  schedulerConfig.worker = {};
  schedulerConfig.worker.operations = '1.0.0';
  if (dcpConfig.worker.nativeEvaluator){
    schedulerConfig.worker.types = ['v4'];
  } 
  else {
    schedulerConfig.worker.types = ['v3'];
  } 
}

// Check if scheduler supports current worker version
let currentWorkerType = 'v4';
let currentWorkerVersion = '1.0.0';
if (!Object.values(schedulerConfig.worker.types).includes(currentWorkerType) || 
    !require('semver').satisfies(schedulerConfig.worker.operations, '^'+currentWorkerVersion)) {
  console.error('\b**** Please update ****\b');
  console.error('The selected scheduler is not capable of running this worker version.');
  console.log(`
Scheduler href:  ${dcpConfig.scheduler.location.href}
Scheduler wants: ${schedulerConfig.worker.operations}\t/ ${schedulerConfig.worker.types}
This worker is:  ${currentWorkerVersion}\t/ ${currentWorkerType}
dcp-client:      ${require('util').inspect(require('dcp/build'))}
`);
  if (process.env.CHECK_SEMVER !== 'false')
    process.exit(1);
}

console.log(`The current scheduler supports worker type(s) ${Object.values(schedulerConfig.worker.types)} and operations ${schedulerConfig.worker.operations}`);

const bin = path.join(options.prefix, 'bin', 'dcp-evaluator');
const args = [
  '-l', path.join(options.prefix, 'libexec', 'evaluator'),
  '--port', options.port,
];

debugger

// web config doesn't nicely handle arrays, so setupFiles.forEach is no-go;
// this hack works with either a real array, or an arrayish-looking ES object
// such as we get in the bundled config.
for (let n=0; setupFiles[n]; n++) {
  // If the path is a realative path nodemodule (i.e. bravajs), take it directly from node_modules
  if (/(^[.])|(\/)/.test(setupFiles[n])){ 
    args.push(require.resolve(setupFiles[n]))
  } else {
    args.push(require.resolve(path.join(options.setupLibexecDir, setupFiles[n])));
  }
}

// Spits out the list of files for a node evaluator instead of spinning up an v8-evaluator 
if(options.evaluatorType === 'node'){
  console.log('{')
  for (arg of args){
    console.log(arg)
  }
  console.log('}')
  process.exit();
}

// Log what we're about to do:
console.log('DCP Evaluator Server');
console.log('Evaluator binary at: ', bin);
console.log('Library path at:     ', args[1]);
console.log('Listening on port:   ', args[3]);
console.log('Worker environment:  ');
args.slice(4).forEach(f => {
  console.log('\t' + f);
});

const ran = require('child_process').spawnSync(bin, args, {
  cwd: __dirname,
  windowsHide: true,
  stdio: ['inherit', 'inherit', 'inherit']
});

console.log('Evaluator server process exited, status', ran.status);
/*
if (ran.error);
  console.error(ran.error.message);
if (ran.stderr)
  console.error(ran.stderr.toString());
*/
process.exit(ran.status);
