#! /usr/bin/env node
/** @file       dcp-evaluator-start
 *  @author     Eddie Roosenmaallen, eddie@kingsds.network
 *  @date       September 2020
 *  
 *  This script starts the DCP Native Evaluator in server mode, with the 
 *  appropriate list of worker startup files queued up
 */

const path = require('path');


const dcp = require('dcp-client').initSync();
const options = require('dcp/dcp-cli')
  .base('Evaluator frontend')
  .option('prefix', {
    desc: 'Path under which native components are installed',
    default: '/opt/dcp',
  })
  .option('port', {
    alias: ['p', 'evaluatorPort', 'daemonPort'],
    desc: 'Port to listen for worker connections',
    default: '9000',
  })
  .argv;


const config = require('dcp/dcp-config').worker || {};

console.log(require.resolve('dcp/dcp-config'))
console.log("This is now the start config ", config)

const setupFiles = config.evaluatorSetupFiles.native;
console.log(setupFiles)

const bin = path.join(options.prefix, 'bin', 'dcp-evaluator');
const args = [
  '-l', path.join(options.prefix, 'libexec', 'evaluator'),
  '--port', options.port,
];

// web config doesn't nicely handle arrays, so setupFiles.forEach is no-go;
// this hack works with either a real array, or an arrayish-looking ES object
// such as we get in the bundled config.
for (let n=0; setupFiles[n]; n++) {
  // If the path is a realative path nodemodule (ie bravajs)
  if (/(^[.])|(\/)/.test(setupFiles[n])){ 
    args.push(require.resolve(setupFiles[n]))
  } else {
    args.push(require.resolve(path.join('..','dcp-worker','libexec', 'evaluator', setupFiles[n])));
  }
}

// Log what we're about to do:
console.log('DCP Evaluator Server');
console.log('Evaluator binary at: ', bin);
console.log('Library path at:     ', args[1]);
console.log('Listening on port:   ', args[3]);
console.log('Worker environment:  ');
args.slice(4).forEach(f => {
  console.log('\t' + f);
});

// Do it
const ran = require('child_process').spawnSync(bin, args);
console.log(ran)
// How'd it go?
console.log('Evaluator server process exited');
console.log(ran.status === 0 ? 'OK' : ran.stderr.toString());
process.exit(ran.status);
